
function checkCashRegister(price, cash, cid) {
 //sort order from highest denomination value to lowest
  cid.reverse();
  
// create object of denomination values
  var valObj = {"ONE HUNDRED": 100.00, "TWENTY": 20.00, "TEN": 10.00, "FIVE": 5.00, "ONE": 1.00, "QUARTER": 0.25, "DIME": 0.10, "NICKEL": 0.05, "PENNY": 0.01};

 //create cid object from cid array
 var cidObj = {};
  cid.map(function(e) {   
    for(var j=0; j<cid.length; j++){
    cidObj[e[0]] = e[1];
  }   
  });
  
  //find change
  var change;
  change = cash-price;
    
 //create array of cash value of cid
  var cidVal = [];
  for(var i=0; i<cid.length; i++){
    cidVal.push(cid[i][1]);
  }
  
  //find total available funds for checking
  var total = cidVal.reduce(function(a, b){
    return a + b;
  }, 0);

  //start testing!
  if(total<change){
    return "Insufficient Funds";
  }
  
  if(total === change){
    return "Closed";
  }
  
  var res=[];
  var m=0;
  if(total>change){
    
    for(var val in valObj){
    
    //if change is larger than denomination value (select denomination types that add to equal change)
      if(change>valObj[val]){
    
    //if change is larger or equal to available cash of a denomination type, add all cash of denom type into result array.     
        if(change>=cidObj[val]){
          res.push([val, cidObj[val]]);
          change -= cidObj[val];
          change.toFixed(2);
      
     //if change less than cash of denom type, find max multiples of denom value and push to result array
        } else if (change<cidObj[val]){
       
       //find multiplier, round down to nearest integer
            m = Math.floor(change/valObj[val]);
            res.push([val, (m*valObj[val])]);
            change -= m*valObj[val];
            change = Math.round(change * 100) / 100;
        }           
      } 
     
     //if change left "unreturned", there is insufficent cash of suitable denom type.
    } if(change>0){
      return "Insufficient Funds";
      
    } else
    return res;
  } 
}

checkCashRegister(3.26, 100.00, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.10], ["QUARTER", 4.25], ["ONE", 90.00], ["FIVE", 55.00], ["TEN", 20.00], ["TWENTY", 60.00], ["ONE HUNDRED", 100.00]]);
